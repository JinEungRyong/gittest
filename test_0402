var config = {
  base: { value: 1000, type: 'balance', label: 'base bet' },
  basePayout: { value: 1.1, type: 'multiplier', label: 'base payout' },
  goal: { value: 1100, type: 'balance', label: 'base goal' },
  goalPayout: { value: 1000, type: 'balance', label: 'goal increase' },
  stop: { value: 60, type: 'multiplier', label: 'base payout' },
  loss: { value: 'increase', type: 'radio', label: 'On loss',
        options: { base: { type: 'noop', label: 'return to base payout'},
		increase: { value: 1, type: 'multiplier', label: 'increase payout' },
		}
		},
  win: { value:'base', type:'radio', label:'On win',
        options: { base: { type: 'noop', label: 'return to base payout'},
		increase: { value:1, type:'multiplier', label: 'increase payout'},
		}
  },
};

log('Script is running..');

var currentPayout = config.basePayout.value;
var currentBase = config.base.value;
var currentGoal = config.goal.value;

engine.bet(currentBase,currentPayout);

engine.on('GAME_STARTING',onGameStarted);
engine.on('GAME_ENDED',onGameEnded);

function onGameStarted() {
	log('betting');
	engine.bet(round_bet(currentBase),currentPayout);
	log('bet');
}

function onGameEnded(info){
	var lastGame = engine.history.first();
	
	if(!lastGame.wager){
		return;
	}
	
	if(lastGame.cashedAt){
		if(config.win.value ==='base'){
			currentPayout = config.basePayout.value;
			currentBase = config.base.value;
			currentGoal = config.goal.value;
			log('Win base:',currentBase/100,' payout:',currentPayout);
		}else {
			console.assert(config.win.value === 'increase');
			currentPayout += config.win.options.increase.value;
		}
	}else{
		if(config.loss.value === 'base'){
			currentPayout = config.basePayout.value;
		}else {
			console.assert(config.loss.value === 'increase');
			currentPayout += config.loss.options.increase.value;
			currentPayout = currentPayout.toFixed(1);
			currentGoal += config.goalPayout.value;
			cal_bet();
			log('loss base:',round_bet(currentBase)' payout:',currentPayout, 'goal:',currentGoal/100);
		}
	}
	
	if( currentPayout > config.stop.value){
		currentPayout = config.basePayout.value;
		currentBase = config.base.value;
		currentGoal = config.goal.value;
		log('stop base:',currentBase/100,' payout:',currentPayout, 'goal:',currentGoal/100);
	}
}

function cal_bet(){
	currentBase = Math.round(currentGoal/currentPayout);
	
}

function round_bet(bet){
	return Math.round(bet/100)*100;
}
